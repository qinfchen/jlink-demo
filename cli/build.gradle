plugins {
    // https://github.com/gradle/gradle-java-modules/blob/master/src/main/java/org/gradle/java/JigsawPlugin.java
    id 'org.gradle.java.experimental-jigsaw' version '0.1.1'
    id 'application'
}

apply plugin: 'com.palantir.jigsaw-patch'

needsPatching {
    // order matters
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
}

javaModule.name = 'cli'
mainClassName = 'cli.Main'

dependencies {
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.slf4j:slf4j-simple' // should this be runtime ??

    implementation files('./build/patchJar/jackson-core-2.9.5.jar') {
        builtBy tasks.getByPath('patchJars')
    }

    implementation files('./build/patchJar/jackson-annotations-2.9.5.jar') {
        builtBy tasks.getByPath('patchJars')
    }

    implementation files('./build/patchJar/jackson-databind-2.9.5.jar') {
        builtBy tasks.getByPath('patchJars')
    }

    // to be removed
    needsPatching 'com.fasterxml.jackson.core:jackson-core'
    needsPatching 'com.fasterxml.jackson.core:jackson-annotations'
    needsPatching 'com.fasterxml.jackson.core:jackson-databind'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def java_home = System.getenv('JAVA_HOME')
task link(type: Exec) {
    dependsOn 'jar'

    workingDir 'build'

    def outputDir = "$buildDir/mydist";
    def modulePath = sourceSets.main.output.getAsPath() + ":" + configurations.compileClasspath.getAsPath()
    print modulePath
    doFirst {
        "rm -rf ${outputDir}".execute()
    }

    commandLine "${java_home}/bin/jlink",
            '--module-path', modulePath,
            '--add-modules', 'cli',
            '--launcher', "cli=cli/${mainClassName}",
            '--output', outputDir,
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages'

    outputs.dir outputDir
}

task tgz(type: Tar, dependsOn: link) {
    compression = Compression.GZIP
    from(link.outputs.files)
    doLast {
        println "Distribution available at ${outputs.files.singleFile} (${outputs.files.singleFile.length() / 1000000} MB)"
    }
}

task doSomething(type: Exec, dependsOn: link) {
    workingDir "$buildDir/mydist"

    executable './bin/cli'
}

check.dependsOn doSomething
